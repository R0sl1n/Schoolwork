-- MySQL Script generated by MySQL Workbench
-- Mon Mar 18 19:49:06 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema turistdb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `turistdb` ;

-- -----------------------------------------------------
-- Schema turistdb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `turistdb` DEFAULT CHARACTER SET utf8 ;
USE `turistdb` ;

-- -----------------------------------------------------
-- Table `turistdb`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `turistdb`.`user` ;

CREATE TABLE IF NOT EXISTS `turistdb`.`user` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(64) NOT NULL,
  `first_name` VARCHAR(64) NOT NULL,
  `last_name` VARCHAR(64) NOT NULL,
  `email` VARCHAR(128) NOT NULL,
  `password_hash` VARCHAR(256) NOT NULL,
  `verified` SMALLINT(6) NOT NULL DEFAULT 0,
  `is_admin` SMALLINT(6) NOT NULL DEFAULT 0,
  `is_blocked` SMALLINT(6) NOT NULL DEFAULT 0,
  `points` INT NOT NULL DEFAULT 0,
  `lives` INT NOT NULL DEFAULT 3,
  `timestamp_locked` TIMESTAMP NOT NULL DEFAULT '2024-04-05 00:00:00',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE,
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turistdb`.`blocked_username`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `turistdb`.`blocked_username` ;

CREATE TABLE IF NOT EXISTS `turistdb`.`blocked_username` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `blocked_username` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `blocked_username_UNIQUE` (`blocked_username` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turistdb`.`category_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `turistdb`.`category_type` ;

CREATE TABLE IF NOT EXISTS `turistdb`.`category_type` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `type` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `type_UNIQUE` (`type` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turistdb`.`category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `turistdb`.`category` ;

CREATE TABLE IF NOT EXISTS `turistdb`.`category` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `category_type_id` INT NOT NULL,
  `definition` VARCHAR(128) NOT NULL,
  `icon` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `definition_UNIQUE` (`definition` ASC) VISIBLE,
  INDEX (`category_type_id` ASC) VISIBLE,
  CONSTRAINT ``
    FOREIGN KEY (`category_type_id`)
    REFERENCES `turistdb`.`category_type` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turistdb`.`city`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `turistdb`.`city` ;

CREATE TABLE IF NOT EXISTS `turistdb`.`city` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `cityName_UNIQUE` (`name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turistdb`.`attraction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `turistdb`.`attraction` ;

CREATE TABLE IF NOT EXISTS `turistdb`.`attraction` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `city_id` INT NOT NULL,
  `name` VARCHAR(64) NOT NULL,
  `practical_information` JSON NULL DEFAULT NULL,
  `short_description` VARCHAR(200) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_attraction_city1_idx` (`city_id` ASC) VISIBLE,
  UNIQUE INDEX `attractionNameCity_UNIQUE` (`name`,`city_id` ASC) VISIBLE,
  CONSTRAINT `fk_attraction_city1`
    FOREIGN KEY (`city_id`)
    REFERENCES `turistdb`.`city` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'attraction_data';


-- -----------------------------------------------------
-- Table `turistdb`.`question`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `turistdb`.`question` ;

CREATE TABLE IF NOT EXISTS `turistdb`.`question` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `attraction_id` INT NOT NULL,
  `level` INT NOT NULL,
  `question_text` VARCHAR(200) NULL DEFAULT NULL,
  `correct_answer` VARCHAR(200) NULL DEFAULT NULL,
  `option_2` VARCHAR(200) NULL DEFAULT NULL,
  `option_3` VARCHAR(200) NULL DEFAULT NULL,
  `option_4` VARCHAR(200) NULL DEFAULT NULL,
  `option_5` VARCHAR(200) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_Question_attraction1_idx` (`attraction_id` ASC) VISIBLE,
  UNIQUE INDEX `attractionQuestion_UNIQUE` (`attraction_id`,`question_text` ASC) VISIBLE,
  CONSTRAINT `fk_Question_attraction1`
    FOREIGN KEY (`attraction_id`)
    REFERENCES `turistdb`.`attraction` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turistdb`.`achievement`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `turistdb`.`achievement` ;

CREATE TABLE IF NOT EXISTS `turistdb`.`achievement` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `definition` VARCHAR(200) NOT NULL,
  `points_required` INT NOT NULL,
  `data` VARCHAR(200) DEFAULT NULL,
  `icon` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turistdb`.`user_has_friend`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `turistdb`.`user_has_friend` ;

CREATE TABLE IF NOT EXISTS `turistdb`.`user_has_friend` (
  `id_user` INT NOT NULL,
  `id_user_friend` INT NOT NULL,
  PRIMARY KEY (`id_user`, `id_user_friend`),
  INDEX `fk_User_has_User_User2_idx` (`id_user_friend` ASC) VISIBLE,
  INDEX `fk_User_has_User_User1_idx` (`id_user` ASC) VISIBLE,
  CONSTRAINT `fk_User_has_User_User1`
    FOREIGN KEY (`id_user`)
    REFERENCES `turistdb`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_has_User_User2`
    FOREIGN KEY (`id_user_friend`)
    REFERENCES `turistdb`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turistdb`.`user_has_achievement`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `turistdb`.`user_has_achievement`;

CREATE TABLE IF NOT EXISTS `turistdb`.`user_has_achievement` (
  `id_user` INT NOT NULL,
  `id_achievement` INT NOT NULL,
  `achieved_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id_user`, `id_achievement`),
  INDEX `fk_User_has_Achievement_Achievement1_idx` (`id_achievement`) VISIBLE,
  INDEX `fk_User_has_Achievement_User1_idx` (`id_user`) VISIBLE,
  CONSTRAINT `fk_User_has_Achievement_User1`
    FOREIGN KEY (`id_user`)
    REFERENCES `turistdb`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_has_Achievement_Achievement1`
    FOREIGN KEY (`id_achievement`)
    REFERENCES `turistdb`.`achievement` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `turistdb`.`attraction_has_category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `turistdb`.`attraction_has_category` ;

CREATE TABLE IF NOT EXISTS `turistdb`.`attraction_has_category` (
  `attraction_id` INT NOT NULL,
  `category_id` INT NOT NULL,
  PRIMARY KEY (`attraction_id`, `category_id`),
  INDEX `fk_attraction_has_category_category1_idx` (`category_id` ASC) VISIBLE,
  INDEX `fk_attraction_has_category_attraction1_idx` (`attraction_id` ASC) VISIBLE,
  CONSTRAINT `fk_attraction_has_category_attraction1`
    FOREIGN KEY (`attraction_id`)
    REFERENCES `turistdb`.`attraction` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_attraction_has_category_category1`
    FOREIGN KEY (`category_id`)
    REFERENCES `turistdb`.`category` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turistdb`.`user_has_level`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `turistdb`.`user_has_level` ;

CREATE TABLE IF NOT EXISTS `turistdb`.`user_has_level` (
  `user_id` INT NOT NULL,
  `attraction_id` INT NOT NULL,
  `level` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`user_id`, `attraction_id`),
  INDEX `fk_user_has_attraction_attraction1_idx` (`attraction_id` ASC) VISIBLE,
  INDEX `fk_user_has_attraction_user1_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_has_attraction_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `turistdb`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_has_attraction_attraction1`
    FOREIGN KEY (`attraction_id`)
    REFERENCES `turistdb`.`attraction` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- -----------------------------------------------------
-- Table `turistdb`.`rewards`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `turistdb`.`rewards` ;

CREATE TABLE IF NOT EXISTS `turistdb`.`rewards` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `reward_type` VARCHAR(255) NOT NULL,
  `details` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `turistdb`.`user_has_reward`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `turistdb`.`user_has_reward` ;

CREATE TABLE IF NOT EXISTS `turistdb`.`user_has_reward` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `id_user` INT NOT NULL,
  `id_reward` INT NOT NULL,
  `has_redeemed` BOOLEAN DEFAULT FALSE,
  PRIMARY KEY (`id`),
  FOREIGN KEY (`id_user`) REFERENCES `turistdb`.`user` (`id`),
  FOREIGN KEY (`id_reward`) REFERENCES `turistdb`.`rewards` (`id`)
) ENGINE = InnoDB;


-- -----------------------------------------------------
-- Data for table `turistdb`.`user`
-- -----------------------------------------------------
START TRANSACTION;
USE `turistdb`;
INSERT INTO `turistdb`.`user` (`id`, `username`, `first_name`, `last_name`, `email`, `password_hash`, `verified`, `is_admin`, `is_blocked`, `points`) 
VALUES (1, 'admin', 'test', 'test', 't@t.no', 'scrypt:32768:8:1$RfAzU7ufbIstpY5r$fe56b6d1bb252e5faef5960e190830e5cf552f6649e1db0e1c0d638cd77cf5d31a4a9859d435a5a4b7c476cdba7239f5200a7c7fe7aa04d562a9b12272afbcfc', 0, 1, 0, 0);
COMMIT;


-- -----------------------------------------------------
-- Data for table `turistdb`.`category_type`
-- -----------------------------------------------------
START TRANSACTION;
USE `turistdb`;
INSERT INTO `turistdb`.`category_type` (`id`, `type`) VALUES (1, 'Attraction');
INSERT INTO `turistdb`.`category_type` (`id`, `type`) VALUES (2, 'Services');
COMMIT;

-- -----------------------------------------------------
-- Data for table `turistdb`.`category`
-- -----------------------------------------------------

USE `turistdb`;
INSERT INTO `turistdb`.`category` (`id`, `category_type_id`, `definition`, `icon`) VALUES (1, 1, 'Museum', 'fa-solid fa-building-columns');
INSERT INTO `turistdb`.`category` (`id`, `category_type_id`, `definition`, `icon`) VALUES (2, 1, 'Animal park', 'fa-solid fa-paw');
INSERT INTO `turistdb`.`category` (`id`, `category_type_id`, `definition`, `icon`) VALUES (3, 1, 'Galleries', 'fa-solid fa-palette');
INSERT INTO `turistdb`.`category` (`id`, `category_type_id`, `definition`, `icon`) VALUES (4, 1, 'Parks & Natural attractions', 'fa-solid fa-tree');
INSERT INTO `turistdb`.`category` (`id`, `category_type_id`, `definition`, `icon`) VALUES (5, 1, 'Architecture & History', 'fa-solid fa-monument');
INSERT INTO `turistdb`.`category` (`id`, `category_type_id`, `definition`, `icon`) VALUES (6, 1, 'Churches & Religious buildings', 'fa-solid fa-place-of-worship');
INSERT INTO `turistdb`.`category` (`id`, `category_type_id`, `definition`, `icon`) VALUES (7, 1, 'Culture centres', 'fa-solid fa-landmark-flag');
INSERT INTO `turistdb`.`category` (`id`, `category_type_id`, `definition`, `icon`) VALUES (8, 2, 'Family Friendly', 'fa-solid fa-child');
INSERT INTO `turistdb`.`category` (`id`, `category_type_id`, `definition`, `icon`) VALUES (9, 2, 'Handicap Accessible', 'fa-brands fa-accessible-icon');
INSERT INTO `turistdb`.`category` (`id`, `category_type_id`, `definition`, `icon`) VALUES (10, 2, 'Near Public Transport', 'fa-solid fa-bus-simple');
INSERT INTO `turistdb`.`category` (`id`, `category_type_id`, `definition`, `icon`) VALUES (11, 2, 'Parking', 'fa-solid fa-square-parking');

COMMIT;




-- -----------------------------------------------------
-- Procedure `turistdb`.`GenerateTestUsers`
-- bruk følgende prosedyre slik i SQL:
-- USE turistdb;
-- CALL GenerateTestUsers(10);
-- for å lage 10 testbrukere
-- -----------------------------------------------------
USE turistdb;

DELIMITER //

CREATE PROCEDURE GenerateTestUsers(IN num_users INT)
BEGIN
    DECLARE i INT DEFAULT 1;
    DECLARE username_suffix INT;
    
    WHILE i <= num_users DO
        SET username_suffix = i;
        INSERT INTO `user` (`username`, `first_name`, `last_name`, `email`, `password_hash`)
        VALUES (
            CONCAT('test_user', username_suffix),
            CONCAT('tester', username_suffix),
            CONCAT('tester_last', username_suffix),
            CONCAT('tester_', username_suffix, '@t.no'),
            'scrypt:32768:8:1$RfAzU7ufbIstpY5r$fe56b6d1bb252e5faef5960e190830e5cf552f6649e1db0e1c0d638cd77cf5d31a4a9859d435a5a4b7c476cdba7239f5200a7c7fe7aa04d562a9b12272afbcfc'
        );
        
        SET i = i + 1;
    END WHILE;
END//

DELIMITER ;


-- -----------------------------------------------------
-- Procedure `turistdb`.`DeleteTestUsers`
-- bruk følgende prosedyre slik i SQL:
-- USE turistdb;
-- CALL DeleteTestUsers(10);
-- for å slette 10 testbrukere
-- -----------------------------------------------------
USE turistdb;

DELIMITER //

CREATE PROCEDURE DeleteTestUsers(IN num_users INT)
BEGIN
    DECLARE i INT DEFAULT 1;
    DECLARE total_users INT;
    
    SELECT COUNT(*) INTO total_users FROM `user` WHERE `username` LIKE 'test_user%';
    
    IF num_users > total_users THEN
        SET num_users = total_users;
    END IF;
    
    WHILE i <= num_users DO
        DELETE FROM `user` WHERE `username` LIKE 'test_user%' ORDER BY id LIMIT 1;
        SET i = i + 1;
    END WHILE;
END//

DELIMITER ;